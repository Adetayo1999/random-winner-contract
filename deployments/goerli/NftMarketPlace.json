{
  "address": "0xcF0e257ecfBce28f47d2d6ADCecA6C7a24A3093C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "NftMarketPlace__InvalidPriceSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NFTNotApprovedForSale",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NftListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NftNotListed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotEnoughProceeds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotNftOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__ProceedsWithdrawalFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NFTBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NFTListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "NFTListingCancelled",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "nftAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketPlace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProceed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3b0b3a2b39c347beb3ad6f0366fe2960f58bc5948a3e39a71cb04ee94ef344cd",
  "receipt": {
    "to": null,
    "from": "0xf07373bb489AB0957E932515261fbCE433EF988c",
    "contractAddress": "0xcF0e257ecfBce28f47d2d6ADCecA6C7a24A3093C",
    "transactionIndex": 43,
    "gasUsed": "1617861",
    "logsBloom": "0x
    "blockHash": "0xe0afe94ace39b78714a7285d589e5f3d9683d119cfc82f8945899bf711559eb9",
    "transactionHash": "0x3b0b3a2b39c347beb3ad6f0366fe2960f58bc5948a3e39a71cb04ee94ef344cd",
    "logs": [],
    "blockNumber": 8270752,
    "cumulativeGasUsed": "9801342",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7cb6226ff4683cbf9c37870234479d52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NftMarketPlace__InvalidPriceSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NFTNotApprovedForSale\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NftListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NftNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotEnoughProceeds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotNftOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__ProceedsWithdrawalFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NFTBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NFTListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"NFTListingCancelled\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketPlace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProceed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketPlace.sol\":\"NftMarketPlace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror NftMarketPlace__NftListed();\\r\\nerror NftMarketPlace__NotNftOwner();\\r\\nerror NftMarketPlace__NFTNotApprovedForSale();\\r\\nerror NftMarketPlace__InvalidPriceSent(address, uint256, uint256, address);\\r\\nerror NftMarketPlace__NftNotListed();\\r\\nerror NftMarketPlace__NotEnoughETH(address, uint256, uint256, uint256);\\r\\nerror NftMarketPlace__NotEnoughProceeds();\\r\\nerror NftMarketPlace__ProceedsWithdrawalFailed();\\r\\nerror NftMarketPlace__InvalidNFTAddress();\\r\\n\\r\\ncontract NftMarketPlace is ReentrancyGuard {\\r\\n    struct Listing {\\r\\n        uint256 tokenId;\\r\\n        uint256 price;\\r\\n        address nftAddress;\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    mapping(address => uint256) s_proceeds;\\r\\n    mapping(address => mapping(uint => Listing)) s_listings;\\r\\n\\r\\n    event NFTListed(\\r\\n        address indexed seller,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed nftAddress,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event NFTListingCancelled(\\r\\n        address indexed owner,\\r\\n        uint256 indexed tokenId,\\r\\n        address indexed nftAddress\\r\\n    );\\r\\n\\r\\n    event NFTBought(\\r\\n        address indexed seller,\\r\\n        address indexed buyer,\\r\\n        uint256 indexed tokenId,\\r\\n        address nftAddress,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    modifier isNotListed(address _nftAddress, uint256 _tokenId) {\\r\\n        Listing memory listing = s_listings[_nftAddress][_tokenId];\\r\\n        if (listing.price != 0 || listing.owner != address(0)) {\\r\\n            revert NftMarketPlace__NftListed();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isListed(address _nftAdddress, uint256 _tokenId) {\\r\\n        Listing memory listing = s_listings[_nftAdddress][_tokenId];\\r\\n        if (listing.price == 0 || listing.owner == address(0)) {\\r\\n            revert NftMarketPlace__NftNotListed();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isTokenOwner(\\r\\n        address _spender,\\r\\n        uint256 _tokenId,\\r\\n        address _nftAddress\\r\\n    ) {\\r\\n        IERC721 nftTokenContract = IERC721(_nftAddress);\\r\\n\\r\\n        // if (!nftTokenContract.supportsInterface(type(IERC721).interfaceId)) {\\r\\n        //     revert NftMarketPlace__InvalidNFTAddress();\\r\\n        // }\\r\\n\\r\\n        if (nftTokenContract.ownerOf(_tokenId) != _spender) {\\r\\n            revert NftMarketPlace__NotNftOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function listItem(\\r\\n        uint256 _tokenId,\\r\\n        address _nftAddress,\\r\\n        uint256 _price\\r\\n    )\\r\\n        public\\r\\n        isTokenOwner(msg.sender, _tokenId, _nftAddress)\\r\\n        isNotListed(_nftAddress, _tokenId)\\r\\n    {\\r\\n        if (_price == 0) {\\r\\n            revert NftMarketPlace__InvalidPriceSent(\\r\\n                msg.sender,\\r\\n                _price,\\r\\n                _tokenId,\\r\\n                _nftAddress\\r\\n            );\\r\\n        }\\r\\n\\r\\n        IERC721 nftContract = IERC721(_nftAddress);\\r\\n        if (nftContract.getApproved(_tokenId) != address(this)) {\\r\\n            revert NftMarketPlace__NFTNotApprovedForSale();\\r\\n        }\\r\\n\\r\\n        Listing memory listing = Listing(\\r\\n            _tokenId,\\r\\n            _price,\\r\\n            _nftAddress,\\r\\n            msg.sender\\r\\n        );\\r\\n        s_listings[_nftAddress][_tokenId] = listing;\\r\\n        emit NFTListed(msg.sender, _tokenId, _nftAddress, _price);\\r\\n    }\\r\\n\\r\\n    function cancelListing(\\r\\n        uint _tokenId,\\r\\n        address _nftAddress\\r\\n    )\\r\\n        external\\r\\n        isTokenOwner(msg.sender, _tokenId, _nftAddress)\\r\\n        isListed(_nftAddress, _tokenId)\\r\\n    {\\r\\n        delete s_listings[_nftAddress][_tokenId];\\r\\n        emit NFTListingCancelled(msg.sender, _tokenId, _nftAddress);\\r\\n    }\\r\\n\\r\\n    function updateListing(\\r\\n        uint256 _price,\\r\\n        uint256 _tokenId,\\r\\n        address _nftAddress\\r\\n    )\\r\\n        external\\r\\n        isTokenOwner(msg.sender, _tokenId, _nftAddress)\\r\\n        isListed(_nftAddress, _tokenId)\\r\\n        nonReentrant\\r\\n    {\\r\\n        if (_price == 0) {\\r\\n            revert NftMarketPlace__InvalidPriceSent(\\r\\n                msg.sender,\\r\\n                _price,\\r\\n                _tokenId,\\r\\n                _nftAddress\\r\\n            );\\r\\n        }\\r\\n        s_listings[_nftAddress][_tokenId].price = _price;\\r\\n        emit NFTListed(msg.sender, _tokenId, _nftAddress, _price);\\r\\n    }\\r\\n\\r\\n    function buyItem(\\r\\n        uint256 _tokenId,\\r\\n        address _nftAddress\\r\\n    ) external payable isListed(_nftAddress, _tokenId) nonReentrant {\\r\\n        Listing memory listing = s_listings[_nftAddress][_tokenId];\\r\\n        if (msg.value < listing.price) {\\r\\n            revert NftMarketPlace__NotEnoughETH(\\r\\n                msg.sender,\\r\\n                msg.value,\\r\\n                listing.price,\\r\\n                _tokenId\\r\\n            );\\r\\n        }\\r\\n        s_proceeds[listing.owner] += msg.value;\\r\\n        delete s_listings[_nftAddress][_tokenId];\\r\\n        IERC721 nftContract = IERC721(listing.nftAddress);\\r\\n        nftContract.safeTransferFrom(listing.owner, msg.sender, _tokenId);\\r\\n        emit NFTBought(\\r\\n            listing.owner,\\r\\n            msg.sender,\\r\\n            _tokenId,\\r\\n            listing.nftAddress,\\r\\n            msg.value\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawProceeds() public nonReentrant {\\r\\n        uint amount = s_proceeds[msg.sender];\\r\\n        if (amount == 0) {\\r\\n            revert NftMarketPlace__NotEnoughProceeds();\\r\\n        }\\r\\n        s_proceeds[msg.sender] = 0;\\r\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\r\\n        if (!success) revert NftMarketPlace__ProceedsWithdrawalFailed();\\r\\n    }\\r\\n\\r\\n    function getListing(\\r\\n        address _nftAddress,\\r\\n        uint256 _tokenId\\r\\n    ) external view returns (Listing memory) {\\r\\n        return s_listings[_nftAddress][_tokenId];\\r\\n    }\\r\\n\\r\\n    function getProceed() external view returns (uint256) {\\r\\n        return s_proceeds[msg.sender];\\r\\n    }\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x8a110c238bd524672dec8201d05743b7ee00e15cdc021f598b26974b885d46ec\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550611c01806100286000396000f3fe6080604052600436106100745760003560e01c80637383d7091161004e5780637383d709146100fa57806388700d1c14610116578063887f495a146101535780639038e6931461017c5761007b565b8063132e9db61461007d57806360101d3a146100a6578063669ad232146100cf5761007b565b3661007b57005b005b34801561008957600080fd5b506100a4600480360381019061009f919061178c565b610193565b005b3480156100b257600080fd5b506100cd60048036038101906100c891906117df565b6106ff565b005b3480156100db57600080fd5b506100e4610a97565b6040516100f1919061182e565b60405180910390f35b610114600480360381019061010f91906117df565b610ade565b005b34801561012257600080fd5b5061013d60048036038101906101389190611849565b610ffb565b60405161014a91906118fc565b60405180910390f35b34801561015f57600080fd5b5061017a60048036038101906101759190611917565b611126565b005b34801561018857600080fd5b506101916114cc565b005b33838360008190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016101eb919061182e565b602060405180830381865afa158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c919061197f565b73ffffffffffffffffffffffffffffffffffffffff1614610279576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85876000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081602001511415806103df5750600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614155b15610416576040517f1deda09200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600088036104615733888b8b6040517f4581b48600000000000000000000000000000000000000000000000000000000815260040161045894939291906119bb565b60405180910390fd5b60008990503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b81526004016104b6919061182e565b602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f7919061197f565b73ffffffffffffffffffffffffffffffffffffffff1614610544576040517f1c16e21700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180608001604052808d81526020018b81526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905080600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508a73ffffffffffffffffffffffffffffffffffffffff168c3373ffffffffffffffffffffffffffffffffffffffff167f392a0f172cb29479635d0b2219b2f96ef24f74dfdf328cb09f1496efe6cfddbe8d6040516106e9919061182e565b60405180910390a4505050505050505050505050565b33828260008190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610757919061182e565b602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610798919061197f565b73ffffffffffffffffffffffffffffffffffffffff16146107e5576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84866000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816020015114806109495750600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16145b15610980576040517fb7b4838000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508773ffffffffffffffffffffffffffffffffffffffff16893373ffffffffffffffffffffffffffffffffffffffff167f83614a26fd4398c876bd6684c0d04cf2e84ee7e4bc24e8d8888ab0e724bac03260405160405180910390a4505050505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b80826000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081602001511480610c425750600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16145b15610c79576040517fb7b4838000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c81611646565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060200151341015610df35733348260200151886040517fa23692d9000000000000000000000000000000000000000000000000000000008152600401610dea9493929190611a00565b60405180910390fd5b3460016000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e469190611a74565b92505081905550600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550506000816040015190508073ffffffffffffffffffffffffffffffffffffffff166342842e0e8360600151338a6040518463ffffffff1660e01b8152600401610f4893929190611aa8565b600060405180830381600087803b158015610f6257600080fd5b505af1158015610f76573d6000803e3d6000fd5b50505050863373ffffffffffffffffffffffffffffffffffffffff16836060015173ffffffffffffffffffffffffffffffffffffffff167fa8cbb93245af99faf6dba28fef247d61b4edff88d90748e0ed7b6767e19f311a856040015134604051610fe2929190611adf565b60405180910390a45050610ff4611695565b5050505050565b61100361169f565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b33828260008190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161117e919061182e565b602060405180830381865afa15801561119b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bf919061197f565b73ffffffffffffffffffffffffffffffffffffffff161461120c576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84866000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816020015114806113705750600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16145b156113a7576040517fb7b4838000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113af611646565b60008a036113fa57338a8a8a6040517f4581b4860000000000000000000000000000000000000000000000000000000081526004016113f194939291906119bb565b60405180910390fd5b89600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020600101819055508773ffffffffffffffffffffffffffffffffffffffff16893373ffffffffffffffffffffffffffffffffffffffff167f392a0f172cb29479635d0b2219b2f96ef24f74dfdf328cb09f1496efe6cfddbe8d6040516114b0919061182e565b60405180910390a46114c0611695565b50505050505050505050565b6114d4611646565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103611552576040517f7646f99400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516115bd90611b39565b60006040518083038185875af1925050503d80600081146115fa576040519150601f19603f3d011682016040523d82523d6000602084013e6115ff565b606091505b505090508061163a576040517fba685aef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050611644611695565b565b60026000540361168b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168290611bab565b60405180910390fd5b6002600081905550565b6001600081905550565b60405180608001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b61170b816116f8565b811461171657600080fd5b50565b60008135905061172881611702565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117598261172e565b9050919050565b6117698161174e565b811461177457600080fd5b50565b60008135905061178681611760565b92915050565b6000806000606084860312156117a5576117a46116f3565b5b60006117b386828701611719565b93505060206117c486828701611777565b92505060406117d586828701611719565b9150509250925092565b600080604083850312156117f6576117f56116f3565b5b600061180485828601611719565b925050602061181585828601611777565b9150509250929050565b611828816116f8565b82525050565b6000602082019050611843600083018461181f565b92915050565b600080604083850312156118605761185f6116f3565b5b600061186e85828601611777565b925050602061187f85828601611719565b9150509250929050565b611892816116f8565b82525050565b6118a18161174e565b82525050565b6080820160008201516118bd6000850182611889565b5060208201516118d06020850182611889565b5060408201516118e36040850182611898565b5060608201516118f66060850182611898565b50505050565b600060808201905061191160008301846118a7565b92915050565b6000806000606084860312156119305761192f6116f3565b5b600061193e86828701611719565b935050602061194f86828701611719565b925050604061196086828701611777565b9150509250925092565b60008151905061197981611760565b92915050565b600060208284031215611995576119946116f3565b5b60006119a38482850161196a565b91505092915050565b6119b58161174e565b82525050565b60006080820190506119d060008301876119ac565b6119dd602083018661181f565b6119ea604083018561181f565b6119f760608301846119ac565b95945050505050565b6000608082019050611a1560008301876119ac565b611a22602083018661181f565b611a2f604083018561181f565b611a3c606083018461181f565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a7f826116f8565b9150611a8a836116f8565b9250828201905080821115611aa257611aa1611a45565b5b92915050565b6000606082019050611abd60008301866119ac565b611aca60208301856119ac565b611ad7604083018461181f565b949350505050565b6000604082019050611af460008301856119ac565b611b01602083018461181f565b9392505050565b600081905092915050565b50565b6000611b23600083611b08565b9150611b2e82611b13565b600082019050919050565b6000611b4482611b16565b9150819050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611b95601f83611b4e565b9150611ba082611b5f565b602082019050919050565b60006020820190508181036000830152611bc481611b88565b905091905056fea26469706673582212204216d172dfedcb989e363e758b0468bb6ec4ac62a4099dfde81593c5ece25b8964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80637383d7091161004e5780637383d709146100fa57806388700d1c14610116578063887f495a146101535780639038e6931461017c5761007b565b8063132e9db61461007d57806360101d3a146100a6578063669ad232146100cf5761007b565b3661007b57005b005b34801561008957600080fd5b506100a4600480360381019061009f919061178c565b610193565b005b3480156100b257600080fd5b506100cd60048036038101906100c891906117df565b6106ff565b005b3480156100db57600080fd5b506100e4610a97565b6040516100f1919061182e565b60405180910390f35b610114600480360381019061010f91906117df565b610ade565b005b34801561012257600080fd5b5061013d60048036038101906101389190611849565b610ffb565b60405161014a91906118fc565b60405180910390f35b34801561015f57600080fd5b5061017a60048036038101906101759190611917565b611126565b005b34801561018857600080fd5b506101916114cc565b005b33838360008190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016101eb919061182e565b602060405180830381865afa158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c919061197f565b73ffffffffffffffffffffffffffffffffffffffff1614610279576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85876000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081602001511415806103df5750600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614155b15610416576040517f1deda09200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600088036104615733888b8b6040517f4581b48600000000000000000000000000000000000000000000000000000000815260040161045894939291906119bb565b60405180910390fd5b60008990503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b81526004016104b6919061182e565b602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f7919061197f565b73ffffffffffffffffffffffffffffffffffffffff1614610544576040517f1c16e21700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060405180608001604052808d81526020018b81526020018c73ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815250905080600260008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508a73ffffffffffffffffffffffffffffffffffffffff168c3373ffffffffffffffffffffffffffffffffffffffff167f392a0f172cb29479635d0b2219b2f96ef24f74dfdf328cb09f1496efe6cfddbe8d6040516106e9919061182e565b60405180910390a4505050505050505050505050565b33828260008190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610757919061182e565b602060405180830381865afa158015610774573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610798919061197f565b73ffffffffffffffffffffffffffffffffffffffff16146107e5576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84866000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816020015114806109495750600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16145b15610980576040517fb7b4838000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508773ffffffffffffffffffffffffffffffffffffffff16893373ffffffffffffffffffffffffffffffffffffffff167f83614a26fd4398c876bd6684c0d04cf2e84ee7e4bc24e8d8888ab0e724bac03260405160405180910390a4505050505050505050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b80826000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081602001511480610c425750600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16145b15610c79576040517fb7b4838000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c81611646565b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060200151341015610df35733348260200151886040517fa23692d9000000000000000000000000000000000000000000000000000000008152600401610dea9493929190611a00565b60405180910390fd5b3460016000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e469190611a74565b92505081905550600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550506000816040015190508073ffffffffffffffffffffffffffffffffffffffff166342842e0e8360600151338a6040518463ffffffff1660e01b8152600401610f4893929190611aa8565b600060405180830381600087803b158015610f6257600080fd5b505af1158015610f76573d6000803e3d6000fd5b50505050863373ffffffffffffffffffffffffffffffffffffffff16836060015173ffffffffffffffffffffffffffffffffffffffff167fa8cbb93245af99faf6dba28fef247d61b4edff88d90748e0ed7b6767e19f311a856040015134604051610fe2929190611adf565b60405180910390a45050610ff4611695565b5050505050565b61100361169f565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905092915050565b33828260008190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b815260040161117e919061182e565b602060405180830381865afa15801561119b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bf919061197f565b73ffffffffffffffffffffffffffffffffffffffff161461120c576040517fd0f0213d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84866000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000816020015114806113705750600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff16145b156113a7576040517fb7b4838000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113af611646565b60008a036113fa57338a8a8a6040517f4581b4860000000000000000000000000000000000000000000000000000000081526004016113f194939291906119bb565b60405180910390fd5b89600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b8152602001908152602001600020600101819055508773ffffffffffffffffffffffffffffffffffffffff16893373ffffffffffffffffffffffffffffffffffffffff167f392a0f172cb29479635d0b2219b2f96ef24f74dfdf328cb09f1496efe6cfddbe8d6040516114b0919061182e565b60405180910390a46114c0611695565b50505050505050505050565b6114d4611646565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103611552576040517f7646f99400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16826040516115bd90611b39565b60006040518083038185875af1925050503d80600081146115fa576040519150601f19603f3d011682016040523d82523d6000602084013e6115ff565b606091505b505090508061163a576040517fba685aef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050611644611695565b565b60026000540361168b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168290611bab565b60405180910390fd5b6002600081905550565b6001600081905550565b60405180608001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b61170b816116f8565b811461171657600080fd5b50565b60008135905061172881611702565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117598261172e565b9050919050565b6117698161174e565b811461177457600080fd5b50565b60008135905061178681611760565b92915050565b6000806000606084860312156117a5576117a46116f3565b5b60006117b386828701611719565b93505060206117c486828701611777565b92505060406117d586828701611719565b9150509250925092565b600080604083850312156117f6576117f56116f3565b5b600061180485828601611719565b925050602061181585828601611777565b9150509250929050565b611828816116f8565b82525050565b6000602082019050611843600083018461181f565b92915050565b600080604083850312156118605761185f6116f3565b5b600061186e85828601611777565b925050602061187f85828601611719565b9150509250929050565b611892816116f8565b82525050565b6118a18161174e565b82525050565b6080820160008201516118bd6000850182611889565b5060208201516118d06020850182611889565b5060408201516118e36040850182611898565b5060608201516118f66060850182611898565b50505050565b600060808201905061191160008301846118a7565b92915050565b6000806000606084860312156119305761192f6116f3565b5b600061193e86828701611719565b935050602061194f86828701611719565b925050604061196086828701611777565b9150509250925092565b60008151905061197981611760565b92915050565b600060208284031215611995576119946116f3565b5b60006119a38482850161196a565b91505092915050565b6119b58161174e565b82525050565b60006080820190506119d060008301876119ac565b6119dd602083018661181f565b6119ea604083018561181f565b6119f760608301846119ac565b95945050505050565b6000608082019050611a1560008301876119ac565b611a22602083018661181f565b611a2f604083018561181f565b611a3c606083018461181f565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a7f826116f8565b9150611a8a836116f8565b9250828201905080821115611aa257611aa1611a45565b5b92915050565b6000606082019050611abd60008301866119ac565b611aca60208301856119ac565b611ad7604083018461181f565b949350505050565b6000604082019050611af460008301856119ac565b611b01602083018461181f565b9392505050565b600081905092915050565b50565b6000611b23600083611b08565b9150611b2e82611b13565b600082019050919050565b6000611b4482611b16565b9150819050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611b95601f83611b4e565b9150611ba082611b5f565b602082019050919050565b60006020820190508181036000830152611bc481611b88565b905091905056fea26469706673582212204216d172dfedcb989e363e758b0468bb6ec4ac62a4099dfde81593c5ece25b8964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3327,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "s_proceeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3334,
        "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
        "label": "s_listings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)3323_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)3323_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketPlace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)3323_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Listing)3323_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketPlace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)3323_storage"
      },
      "t_struct(Listing)3323_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketPlace.Listing",
        "members": [
          {
            "astId": 3316,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3318,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3320,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "nftAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3322,
            "contract": "contracts/NftMarketPlace.sol:NftMarketPlace",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}